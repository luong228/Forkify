"use strict";

require("core-js/modules/es.string.replace");

require("core-js/modules/es.typed-array.float32-array");

require("core-js/modules/es.typed-array.float64-array");

require("core-js/modules/es.typed-array.int8-array");

require("core-js/modules/es.typed-array.int16-array");

require("core-js/modules/es.typed-array.int32-array");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.uint8-clamped-array");

require("core-js/modules/es.typed-array.uint16-array");

require("core-js/modules/es.typed-array.uint32-array");

require("core-js/modules/es.typed-array.from");

require("core-js/modules/es.typed-array.of");

require("core-js/modules/web.immediate");

require("core-js/modules/web.url");

require("core-js/modules/web.url.to-json");

require("core-js/modules/web.url-search-params");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// if (module.hot) module.hot.accept();
///////////////////////////////////////
const controlRecipe = async () => {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSpinner(); // Loading recipe


    await model.loadRecipe(id); // Rendering recipe

    _recipeView.default.render(model.state.recipe); // recipeContainer.insertAdjacentHTML('afterbegin', markup)

  } catch (err) {
    _recipeView.default.renderError(err);
  }
};

const controlSearchResults = async () => {
  try {
    _resultsView.default.renderSpinner(); // Get search query


    const query = _searchView.default.getQuery();

    if (!query) return; // Load search results

    await model.loadSearchResults(query); // Render results

    _resultsView.default.render(model.getSearchResultsPage()); // Render pagination


    _paginationView.default.render(model.state.search);
  } catch (err) {
    console.error(err);
  }
};

const init = () => {
  _recipeView.default.addHandlerRender(controlRecipe);

  _searchView.default.addHandlerSearch(controlSearchResults);
};

init();