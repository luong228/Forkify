"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _view = _interopRequireDefault(require("./view"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaginationView extends _view.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", document.querySelector('.pagination'));

    _defineProperty(this, "_errorMessage", 'No recipes found for your query. Please try again!');

    _defineProperty(this, "_message", '');
  }

  addHandlerClick(handler) {
    this._parentElement.addEventListener('click', e => {
      const btn = e.target.closest('.btn--inline');
      const goToPage = btn.dataset.goto;
      handler(goToPage);
    });
  }

  _generateMarkup() {
    const curPage = this._data.currentPage;
    const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage); // Page 1, and there are other pages

    if (curPage === 1 && numPages > 1) {
      return this._generateMarkupButton(curPage, false, true);
    } // Page 1, and there are NO other pages


    if (curPage === 1 === numPages) {
      return '';
    } // Last page


    if (curPage === numPages && numPages > 1) {
      return this._generateMarkupButton(curPage, true, false);
    } // Other pages


    if (curPage < numPages && curPage !== 1) {
      return this._generateMarkupButton(curPage, true, true);
    }
  }

  _generateMarkupButton(curPage, prev = false, next = false) {
    console.log(curPage);
    const prevBtn = `
            <button data-goto="${curPage - 1}" class="btn--inline pagination__btn--prev">
                <svg class="search__icon">
                <use href="${_icons.default}#icon-arrow-left"></use>
                </svg>
                <span>Page ${curPage - 1}</span>
            </button>`;
    const nextBtn = `
                <button data-goto="${curPage + 1}" class="btn--inline pagination__btn--next">
                <span>Page ${curPage + 1}</span>
                <svg class="search__icon">
                    <use href="${_icons.default}#icon-arrow-right"></use>
                </svg>
                </button>`;
    if (prev && next) return prevBtn.concat(nextBtn);
    if (prev) return prevBtn;
    return nextBtn;
  }

}

var _default = new PaginationView();

exports.default = _default;